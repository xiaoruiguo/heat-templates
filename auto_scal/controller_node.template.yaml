## Author: Jeffrey Guan
## Name: controller_node.template.yaml
## Date: 2016-08-15
## Note: create controller node.
## Version: Kilo

heat_template_version: '2015-04-30'

description: Controller server

parameters:
  name:
    type: string
    default: "ctrl_volume"
  image:
    type: string
    default: "cirrors"
  flavor:
    type: string
    default: m1.small
  volumeSize:
    type: string
    description: size of the cinder volume used for database
    default: 1
  floating_network_id:
    type: string
    default: "dddddd"
    description: external network id
  br-fw-admin-network_id:
    type: string
    default: "dddddd"
    description: 
  br-storage-network_id:
    type: string
    default: "dddddd"
    description: 
  net04-ext-network_id:
    type: string
    default: "dddddd"
    description: 
  br-mgmt-network_id:
    type: string
    default: "dddddd"
    description: 
  br-mesh-network_id:
    type: string
    default: "dddddd"
    description: 
  br-fw-admin_ipaddress:
    type: string
    default: "dddddd"
    description: 
  br-storage_ipaddress:
    type: string
    default: "dddddd"
    description: 
  net04-ext_ipaddress1:
    type: string
    default: "dddddd"
    description: 
  net04-ext_ipaddress2:
    type: string
    default: "dddddd"
    description: 
  br-mgmt_ipaddress:
    type: string
    default: "dddddd"
    description: 
  br-mesh_ipaddress:
    type: string
    default: "dddddd"
    description: 
  net04-ext_subnet_id:
    type: string
    default: "dddddd"
  user_data:
    type: string
    default: "dddddd"
    
resources:

## start of controller node definitions

  ################################################################
  #                 Begin: Create Port                           #
  ################################################################
  # Creat a new port.
  ETH0-br-fw-admin:
    type: OS::Neutron::Port
    properties:
      name: { get_param: name }
      network: { get_param: br-fw-admin-network_id }
      fixed_ips:
        - ip_address: { get_param: br-fw-admin_ipaddress }

  # Creat a new port.
  ETH1-br-storage:
    type: OS::Neutron::Port
    properties:
      name: "eth0"
      network: { get_param: br-storage-network_id }
      fixed_ips:
        - ip_address: { get_param: br-storage_ipaddress } 

  ETH2-net04-ext:
    type: OS::Neutron::Port
    properties:
      name: { get_param: name }
      network: { get_param: net04-ext-network_id }
      fixed_ips:
        - 
          subnet: { get_param: net04-ext_subnet_id }
          ip_address: { get_param: net04-ext_ipaddress1 }
        - subnet: { get_param: net04-ext_subnet_id }
          ip_address: { get_param: net04-ext_ipaddress2 }

  # Creat a new port.
  ETH3-br-mgmt:
    type: OS::Neutron::Port
    properties:
      name: "eth1"
      network: { get_param: br-mgmt-network_id }
      fixed_ips:
        - ip_address: { get_param: br-mgmt_ipaddress }

  # Creat a new port.
  ETH4-br-mesh:
    type: OS::Neutron::Port
    properties:
      name: "eth2"
      network: { get_param: br-mesh-network_id }
      fixed_ips:
        - ip_address: { get_param: br-mesh_ipaddress }
 
  ################################################################
  #              End: Create Port                                #
  ################################################################
  # Create an Floating IP with the External Network ID.
  # NOTE: the port binding to this Floating IP should only
  #       can be set with ONE fixed IP.
  #FLOATING-IP:
  #  type: OS::Neutron::FloatingIP
  #  properties:
  #    floating_network_id: { get_param: floating_network_id }
  #    port_id: { get_resource: ETH2-net04-ext }

  # Create controller node.
  ctrl_node:
    type: OS::Nova::Server
   # depends_on: ctrlVolume
    properties:
      name:
        str_replace:
          template: $hostname
          params:
            $hostname: { get_param: name }

      flavor: { get_param: flavor }
      config_drive: True
      image: { get_param: image }
      user_data: { get_param: user_data }
#      block_device_mapping:
#        - { volume_id: { get_resource: ctrlVolume}, device_name: vdb, delete_on_termination: 'true' }

      networks:
        - port: { get_resource: ETH0-br-fw-admin }
        - port: { get_resource: ETH1-br-storage }
        - port: { get_resource: ETH2-net04-ext }
        - port: { get_resource: ETH3-br-mgmt }
        - port: { get_resource: ETH4-br-mesh }

  # Create volume for controller node.
#  ctrlVolume:
#    type: OS::Cinder::Volume
#    properties:
#      name:
#        str_replace:
#          template: $name:vdb
#          params:
#            $name: { get_param: name }
#      size: { get_param: volumeSize }
#  ctrlVolumeAttach:
#    type: OS::Cinder::VolumeAttachment
#    properties:
#      instance_uuid: { get_resource: ctrl_node }
#      volume_id: { get_resource: ctrlVolume }

## end of node controller node definitions


