## Author: Jeffrey Guan
## Name: controller_node.template.yaml
## Date: 2016-08-15
## Note: create controller node.
## Version: Kilo

heat_template_version: '2015-04-30'

description: Controller server

parameters:
  name:
    type: string
    default: "ctrl_volume"
  indx:
    type: string
    default: " "
  image:
    type: string
    default: "cirrors"
  flavor:
    type: string
    default: m1.small
  volumeSize:
    type: string
    description: size of the cinder volume used for database
    default: 1
  private_network:
    type: json
    description: 
  floating_network_id:
    type: string
    default: " "
  br-fw-admin_ipaddress:
    type: string
  br-storage_ipaddress:
    type: string
  br-mesh_ipaddress:
    type: string 
  net04-ext_ipaddress1:
    type: string
  net04-ext_ipaddress2:
    type: string        
  net04-ext_ipaddress3:
    type: string        
  net04-ext_mac_addr_ip2:
    type: string        
  net04-ext_mac_addr_ip3:
    type: string        
  br-mgmt_ipaddress1:
    type: string
  br-mgmt_ipaddress2:
    type: string        
  br-mgmt_ipaddress3:
    type: string        
  br-mgmt_mac_addr_ip2:
    type: string        
  br-mgmt_mac_addr_ip3:
    type: string        
  security_group:
    type: json

resources:

## start of controller node definitions

  ################################################################
  #	            Begin: Create Port                           #
  ################################################################
  # Creat a new port.
  ETH0-br-fw-admin:
    type: OS::Neutron::Port
    properties:
      name:
        str_replace:
          template: $INDX-eth0
          params:
            $INDX: { get_param: indx }

      network: { get_param: [private_network, br-fw-admin, network] }
      security_groups: 
        - { get_param: [security_group, sec_group] }
      fixed_ips:
        - ip_address: { get_param: br-fw-admin_ipaddress }

  # Creat a new port.
  ETH1-br-storage:
    type: OS::Neutron::Port
    properties:
      name: 
        str_replace:
          template: $INDX-eth1
          params:
            $INDX: { get_param: indx }

      network: { get_param: [private_network, br-storage, network] }
      security_groups: 
        - { get_param: [security_group, sec_group] }
      fixed_ips:
        - ip_address: { get_param: br-storage_ipaddress } 

  # Creat a new port.
  ETH2-net04-ext:
    type: OS::Neutron::Port
    properties:
      name: 
        str_replace:
          template: $INDX-eth2
          params:
            $INDX: { get_param: indx }

      network:  { get_param: [private_network, net04_ext, network] }
      security_groups: 
        - { get_param: [security_group, sec_group] }

      # These three IPs are binded to the same port. 
      # net04-ext_ipaddress2: b_public ip address in haproxy namespace;
      # net04-ext_ipaddress3: v_vrouter_pub ip address in vrouter namespace;
      # net04-ext_ipaddress1: br-ex ip address.
      # The MAC address for net04-ext_ipaddress2 and net04-ext_ipaddress3 will always change
      # in case of reboot, Please DO hard-code these MACs in the shell script.
      allowed_address_pairs: [
          { "mac_address": { get_param: net04-ext_mac_addr_ip2 }, "ip_address": {get_param: net04-ext_ipaddress2 }}, 
          { "mac_address": { get_param: net04-ext_mac_addr_ip3 }, "ip_address": {get_param: net04-ext_ipaddress3 }}, 
          { "ip_address": {get_param: net04-ext_ipaddress1 }}
        ]

      # Two fixed ips are binded to this port. 
      # The net04-ext_ipaddress2 is for front-end;  
      # The net04-ext_ipaddress1 is for back-end.  
      # Both of them will be associated with floating ips.
      fixed_ips:
        - 
          subnet: { get_param: [private_network, net04_ext, subnet] }
          ip_address: { get_param: net04-ext_ipaddress1 }
        - 
          subnet: { get_param: [private_network, net04_ext, subnet] }
          ip_address: { get_param: net04-ext_ipaddress2 }

  # Creat a new port.
  ETH3-br-mgmt:
    type: OS::Neutron::Port
    properties:
      name: 
        str_replace:
          template: $INDX-eth3
          params:
            $INDX: { get_param: indx }

      network: { get_param: [private_network, br-mgmt, network] }
      security_groups: 
        - { get_param: [security_group, sec_group] }
      # br-mgmt_ipaddress2: b_management's ip address in haproxy namespace;
      # br-mgmt_ipaddress3: b_vrouter's ip address in vrouter namespace;
      # br-mgmt_ipaddress1: br-mgmt's ip address. 
      allowed_address_pairs: [
          { "mac_address": { get_param: br-mgmt_mac_addr_ip2 }, "ip_address": {get_param: br-mgmt_ipaddress2 }}, 
          { "mac_address": { get_param: br-mgmt_mac_addr_ip3 }, "ip_address": {get_param: br-mgmt_ipaddress3 }}, 
          { "ip_address": {get_param: br-mgmt_ipaddress1 }}
        ]

      fixed_ips:
        - ip_address: { get_param: br-mgmt_ipaddress1 }

  # Creat a new port.
  ETH4-br-mesh:
    type: OS::Neutron::Port
    properties:
      name:
        str_replace:
          template: $INDX-eth4
          params:
            $INDX: { get_param: indx }

      network: { get_param: [private_network, br-mesh, network] }
      security_groups: 
        - { get_param: [security_group, sec_group] }
      fixed_ips:
        - ip_address: { get_param: br-mesh_ipaddress }
 
  ################################################################
  #              End: Create Port                                #
  ################################################################
 
  # Create controller node.
  ctrl_node:
    type: OS::Nova::Server
   # depends_on: ctrlVolume
    properties:
      name:
        str_replace:
          template: $SERVER_NAME
          params:
            $SERVER_NAME: { get_param: name }

      flavor: { get_param: flavor }
      config_drive: True
      image: { get_param: image }

      user_data_format: RAW
      user_data:
        str_replace:
          template: { get_file: userdata_controller_node.sh }
          params:
            $DEFAULT_GATEWAY: { get_param: indx }

      networks:
        - port: { get_resource: ETH0-br-fw-admin }
        - port: { get_resource: ETH1-br-storage }
        - port: { get_resource: ETH2-net04-ext }
        - port: { get_resource: ETH3-br-mgmt }
        - port: { get_resource: ETH4-br-mesh }

#      block_device_mapping:
#        - { volume_id: { get_resource: ctrlVolume}, device_name: vdb, delete_on_termination: 'true' }


  # Create volume for controller node.
#  ctrlVolume:
#    type: OS::Cinder::Volume
#    properties:
#      name:
#        str_replace:
#          template: $name:vdb
#          params:
#            $name: { get_param: name }
#      size: { get_param: volumeSize }
#  ctrlVolumeAttach:
#    type: OS::Cinder::VolumeAttachment
#    properties:
#      instance_uuid: { get_resource: ctrl_node }
#      volume_id: { get_resource: ctrlVolume }

## end of node controller node definitions


